// https://www.facebook.com/codingcompetitions/hacker-cup/2020/round-1/problems/A1

#include <cassert>
#include <iostream>
#include <map>
#include <vector>
#pragma GCC optimize "trapv"                                        // Detect overflow


long long modulo(long long x) {
    if (x < 0) {
        x = x % 1000000007 + 1000000007;
    }
    return x % 1000000007;
}

int solve(const std::vector<int>& L, const std::vector<int>& H, int W) {
    int N = L.size();
    int MAX_L = L.back() + W + 1;
    std::vector<int> height_map(MAX_L);

    // To speed up
    std::vector<long long> perimeters(MAX_L);
    long long last_perimeter = 0;

    std::vector<long long> P;
    for (int n = 0; n < N; n++) {
        // Update Height Map
        for (int l = L[n]; l < L[n] + W; l++) {
            height_map[l] = std::max(height_map[l], H[n]);
        }

        // Compute perimeter (slow)
        // long long p = 0;
        // for (int l = 0; l < L[n] + W + 1; l++) {
        //     int height_diff = (l > 0) ? std::abs(height_map[l] - height_map[l - 1]) : height_map[l];
        //     p += height_diff;                                       // Changes in height
        //     if (height_map[l] > 0) {
        //         p += 2;                                             // Add base and top
        //     }
        // }

        // Compute perimeter (fast)
        long long p = (L[n] > 0) ? perimeters[L[n] - 1] : 0;        // Resume from previous calculation
        if (p == 0) p = last_perimeter;                             // If the room is detached from previous, then take last perimeter value
        for (int l = L[n]; l < L[n] + W + 1; l++) {
            int height_diff = (l > 0) ? std::abs(height_map[l] - height_map[l - 1]) : height_map[l];
            p += height_diff;                                       // Changes in height
            if (height_map[l] > 0) {
                p += 2;                                             // Add base and top
            }
            perimeters[l] = p;
            last_perimeter = p;
        }

        p = modulo(p);
        P.push_back(p);
    }
    long long answer = 1;
    for (long long p : P) {
        answer = modulo(answer * p);
    }
    return answer;
}


int main() {
    {
        // Case #6
        int N = 200;
        int K = 52;
        int W = 18;
        std::vector<int> L = {524, 546, 576, 601, 611, 631, 652, 661, 694, 719, 722, 732, 763, 770, 785, 789, 790, 796, 827, 829, 851, 869, 880, 898, 912, 936, 940, 944, 970, 993, 1009, 1025, 1029, 1033, 1048, 1082, 1094, 1103, 1129, 1158, 1169, 1186, 1203, 1231, 1252, 1283, 1287, 1319, 1347, 1349, 1383, 1414};
        assert(L.size() == K);
        long long Al = 0, Bl = 1, Cl = 16, Dl = 41948;
        std::vector<int> H = {24214, 5498, 9166, 7368, 340, 278, 651, 3188, 730, 4665, 2384, 732, 6097, 1831, 4420, 9037, 772, 8151, 515, 82, 4424, 113, 6023, 427, 614, 431, 155, 286, 702, 1015, 2451, 352, 604, 9026, 13339, 24134, 960, 558, 194, 2797, 4460, 629, 2861, 644, 7396, 961, 407, 533, 6628, 166, 559, 2344};
        assert(H.size() == K);
        long long Ah = 128277793, Bh = 281088604, Ch = 354280740, Dh = 26747;
        for (int n = K; n < N; n++) {
            int l = ((Al * L[L.size() - 2] + Bl * L[L.size() - 1] + Cl) % Dl) + 1;
            L.push_back(l);
            int h = ((Ah * H[H.size() - 2] + Bh * H[H.size() - 1] + Ch) % Dh) + 1;
            H.push_back(h);
        }
        assert(L.size() == N);
        assert(H.size() == N);
        int answer = solve(L, H, W);
        assert(answer == 491386184);
    }

    {
        // Case #31
        int N = 631;
        int K = 65;
        int W = 17;
        std::vector<int> L = {9105, 9124, 9156, 9183, 9215, 9240, 9257, 9279, 9302, 9332, 9344, 9358, 9383, 9389, 9421, 9424, 9453, 9466, 9470, 9499, 9502, 9531, 9534, 9535, 9568, 9577, 9582, 9613, 9614, 9637, 9665, 9676, 9690, 9714, 9716, 9719, 9736, 9751, 9756, 9766, 9798, 9826, 9842, 9861, 9863, 9874, 9908, 9938, 9945, 9957, 9966, 9973, 9983, 9994, 10024, 10056, 10083, 10093, 10100, 10122, 10156, 10178, 10189, 10217, 10240};
        assert(L.size() == K);
        long long Al = 0, Bl = 1, Cl = 3, Dl = 333518872;
        std::vector<int> H = {695365, 413263, 151391, 691573, 414297, 374331, 121653, 405498, 828634, 432156, 765849, 119029, 373097, 269150, 245784, 458817, 720338, 849260, 145618, 48871, 860486, 858519, 787525, 250401, 106672, 210287, 328629, 343994, 160629, 624692, 889270, 323665, 366605, 888294, 739670, 220348, 351673, 345849, 537961, 513864, 23456, 45925, 505073, 213535, 181450, 17369, 287978, 698115, 831480, 179023, 418736, 296822, 814301, 620283, 102094, 754684, 359229, 974109, 860516, 35128, 522081, 347958, 789748, 269555, 40436};
        assert(H.size() == K);
        long long Ah = 318819442, Bh = 56917796, Ch = 487719241, Dh = 229351947;
        for (int n = K; n < N; n++) {
            int l = ((Al * L[L.size() - 2] + Bl * L[L.size() - 1] + Cl) % Dl) + 1;
            L.push_back(l);
            int h = ((Ah * H[H.size() - 2] + Bh * H[H.size() - 1] + Ch) % Dh) + 1;
            H.push_back(h);
        }
        assert(L.size() == N);
        assert(H.size() == N);
        int answer = solve(L, H, W);
        assert(answer == 967965940);
    }

    {
        // Case #29
        int N = 942;
        int K = 96;
        int W = 11;
        std::vector<int> L = {9072, 9090, 9094, 9103, 9109, 9127, 9148, 9168, 9180, 9197, 9216, 9217, 9237, 9259, 9280, 9302, 9310, 9314, 9333, 9352, 9354, 9360, 9361, 9371, 9387, 9408, 9428, 9447, 9456, 9468, 9479, 9493, 9508, 9511, 9519, 9530, 9540, 9550, 9558, 9568, 9572, 9590, 9593, 9615, 9623, 9645, 9667, 9679, 9681, 9697, 9700, 9721, 9734, 9737, 9743, 9764, 9781, 9784, 9802, 9824, 9845, 9864, 9885, 9903, 9914, 9927, 9936, 9952, 9962, 9980, 9999, 10006, 10011, 10020, 10033, 10042, 10060, 10066, 10086, 10102, 10120, 10137, 10142, 10152, 10167, 10174, 10193, 10198, 10212, 10220, 10230, 10235, 10251, 10263, 10269, 10270};
        assert(L.size() == K);
        long long Al = 0, Bl = 1, Cl = 10, Dl = 326734799;
        std::vector<int> H = {722925, 992134, 327747, 593141, 381754, 4014, 67680, 220956, 883848, 280704, 699596, 238898, 528515, 690449, 694444, 179183, 913750, 5201, 360591, 16209, 388042, 169602, 35167, 355422, 333958, 823572, 508338, 775125, 789941, 971295, 293184, 173493, 350917, 302204, 694767, 925417, 490187, 157825, 774987, 277326, 510083, 527063, 992785, 600611, 190837, 420152, 525546, 789644, 736500, 192330, 966133, 529731, 524033, 794259, 36477, 67931, 50892, 212697, 457546, 695538, 242778, 698263, 193555, 24435, 988866, 630557, 407441, 154693, 494929, 307461, 357550, 21844, 615565, 826125, 462236, 688890, 429591, 861334, 442883, 294729, 752233, 976120, 899090, 959223, 193727, 214976, 567927, 713383, 411411, 868551, 198057, 116752, 716032, 456304, 464226, 442892};
        assert(H.size() == K);
        long long Ah = 579052632, Bh = 809678771, Ch = 613853758, Dh = 308602806;
        for (int n = K; n < N; n++) {
            int l = ((Al * L[L.size() - 2] + Bl * L[L.size() - 1] + Cl) % Dl) + 1;
            L.push_back(l);
            int h = ((Ah * H[H.size() - 2] + Bh * H[H.size() - 1] + Ch) % Dh) + 1;
            H.push_back(h);
        }
        assert(L.size() == N);
        assert(H.size() == N);
        int answer = solve(L, H, W);
        assert(answer == 867922559);
    }

    {
        // Case #9
        int N = 1000000;
        int K = 1000;
        int W = 20;
        std::vector<int> L = {9098, 9130, 9152, 9170, 9194, 9226, 9262, 9290, 9292, 9331, 9334, 9349, 9377, 9405, 9436, 9441, 9467, 9484, 9513, 9514, 9546, 9569, 9574, 9576, 9610, 9624, 9655, 9690, 9691, 9716, 9749, 9780, 9795, 9811, 9821, 9831, 9870, 9877, 9883, 9909, 9913, 9949, 9988, 10008, 10020, 10026, 10046, 10057, 10065, 10073, 10113, 10133, 10136, 10149, 10175, 10180, 10216, 10246, 10251, 10262, 10264, 10303, 10338, 10365, 10393, 10408, 10411, 10443, 10477, 10483, 10494, 10505, 10532, 10565, 10593, 10626, 10645, 10685, 10718, 10748, 10781, 10798, 10809, 10848, 10851, 10857, 10886, 10891, 10913, 10922, 10944, 10949, 10955, 10986, 11002, 11007, 11012, 11030, 11050, 11051, 11055, 11080, 11120, 11123, 11135, 11154, 11161, 11178, 11193, 11233, 11244, 11277, 11301, 11341, 11366, 11389, 11425, 11437, 11461, 11492, 11511, 11537, 11561, 11598, 11621, 11652, 11679, 11688, 11728, 11733, 11736, 11737, 11746, 11758, 11790, 11813, 11840, 11861, 11889, 11907, 11926, 11959, 11996, 12020, 12022, 12046, 12059, 12099, 12125, 12154, 12164, 12185, 12209, 12215, 12252, 12267, 12286, 12320, 12353, 12365, 12380, 12399, 12401, 12413, 12442, 12469, 12493, 12495, 12498, 12525, 12539, 12577, 12596, 12635, 12646, 12661, 12664, 12693, 12722, 12736, 12737, 12773, 12793, 12815, 12816, 12841, 12875, 12898, 12934, 12954, 12967, 12992, 13014, 13015, 13030, 13044, 13049, 13052, 13071, 13087, 13120, 13123, 13126, 13152, 13172, 13194, 13212, 13231, 13254, 13274, 13293, 13297, 13303, 13308, 13336, 13347, 13364, 13370, 13373, 13397, 13421, 13446, 13466, 13479, 13514, 13548, 13584, 13610, 13637, 13667, 13680, 13702, 13742, 13765, 13771, 13773, 13797, 13799, 13812, 13843, 13860, 13861, 13897, 13913, 13940, 13951, 13965, 13991, 14004, 14029, 14057, 14080, 14106, 14135, 14160, 14194, 14234, 14245, 14283, 14320, 14341, 14358, 14376, 14407, 14437, 14448, 14482, 14491, 14496, 14511, 14512, 14519, 14557, 14564, 14592, 14604, 14626, 14630, 14659, 14688, 14705, 14736, 14737, 14753, 14759, 14787, 14803, 14809, 14826, 14834, 14851, 14862, 14868, 14901, 14925, 14940, 14969, 14981, 15002, 15038, 15044, 15060, 15061, 15077, 15094, 15104, 15119, 15124, 15158, 15161, 15198, 15225, 15265, 15269, 15307, 15322, 15339, 15357, 15379, 15415, 15443, 15446, 15463, 15495, 15529, 15569, 15585, 15619, 15652, 15673, 15698, 15705, 15736, 15763, 15797, 15825, 15832, 15863, 15888, 15894, 15921, 15941, 15960, 15965, 16004, 16023, 16062, 16077, 16106, 16109, 16115, 16132, 16151, 16186, 16212, 16227, 16256, 16291, 16299, 16304, 16311, 16330, 16357, 16363, 16375, 16386, 16408, 16425, 16461, 16471, 16493, 16498, 16535, 16570, 16596, 16597, 16606, 16615, 16647, 16660, 16700, 16735, 16764, 16771, 16789, 16807, 16815, 16829, 16832, 16863, 16898, 16925, 16936, 16945, 16968, 16973, 16990, 17003, 17031, 17066, 17101, 17115, 17141, 17153, 17166, 17186, 17193, 17227, 17255, 17288, 17308, 17345, 17382, 17420, 17434, 17462, 17484, 17504, 17511, 17534, 17567, 17581, 17587, 17619, 17652, 17680, 17689, 17696, 17722, 17757, 17787, 17815, 17825, 17865, 17866, 17898, 17903, 17922, 17926, 17954, 17971, 18011, 18044, 18063, 18079, 18103, 18108, 18136, 18139, 18145, 18147, 18162, 18171, 18209, 18245, 18253, 18273, 18305, 18326, 18359, 18363, 18365, 18397, 18399, 18417, 18452, 18474, 18494, 18505, 18509, 18541, 18569, 18592, 18617, 18626, 18653, 18666, 18695, 18726, 18735, 18772, 18776, 18791, 18816, 18849, 18866, 18876, 18900, 18917, 18933, 18940, 18971, 18981, 19003, 19017, 19026, 19028, 19064, 19079, 19117, 19127, 19162, 19167, 19204, 19236, 19253, 19279, 19303, 19335, 19352, 19359, 19384, 19407, 19408, 19424, 19451, 19463, 19484, 19503, 19514, 19517, 19550, 19585, 19590, 19629, 19632, 19637, 19656, 19692, 19707, 19737, 19753, 19767, 19779, 19802, 19829, 19838, 19849, 19871, 19878, 19892, 19908, 19926, 19933, 19963, 19980, 19990, 20029, 20035, 20071, 20082, 20103, 20127, 20165, 20186, 20217, 20243, 20248, 20256, 20262, 20266, 20304, 20344, 20383, 20418, 20437, 20463, 20474, 20480, 20484, 20502, 20514, 20515, 20529, 20532, 20540, 20562, 20572, 20574, 20576, 20580, 20608, 20631, 20634, 20667, 20702, 20710, 20750, 20778, 20810, 20846, 20883, 20891, 20931, 20948, 20971, 21001, 21029, 21064, 21087, 21097, 21113, 21115, 21118, 21133, 21173, 21203, 21225, 21227, 21232, 21242, 21282, 21290, 21329, 21363, 21395, 21400, 21421, 21439, 21460, 21470, 21471, 21499, 21527, 21529, 21568, 21606, 21610, 21611, 21630, 21652, 21665, 21674, 21683, 21709, 21740, 21759, 21775, 21815, 21838, 21869, 21909, 21916, 21936, 21968, 22003, 22028, 22036, 22066, 22074, 22103, 22113, 22138, 22164, 22169, 22209, 22239, 22246, 22279, 22312, 22322, 22326, 22347, 22380, 22381, 22395, 22433, 22439, 22456, 22475, 22495, 22518, 22550, 22565, 22570, 22598, 22628, 22631, 22654, 22694, 22695, 22734, 22749, 22760, 22779, 22787, 22805, 22809, 22811, 22832, 22870, 22882, 22886, 22889, 22920, 22933, 22969, 23002, 23036, 23046, 23083, 23121, 23152, 23176, 23194, 23215, 23239, 23241, 23281, 23300, 23324, 23342, 23359, 23390, 23424, 23451, 23465, 23505, 23520, 23548, 23564, 23577, 23596, 23635, 23670, 23691, 23696, 23727, 23742, 23756, 23757, 23772, 23784, 23787, 23815, 23855, 23872, 23903, 23914, 23933, 23966, 23988, 24013, 24033, 24044, 24079, 24106, 24113, 24142, 24154, 24163, 24199, 24219, 24253, 24264, 24286, 24305, 24333, 24346, 24380, 24393, 24396, 24397, 24416, 24432, 24463, 24495, 24505, 24538, 24539, 24567, 24569, 24598, 24632, 24669, 24671, 24698, 24714, 24752, 24779, 24783, 24800, 24835, 24836, 24872, 24880, 24914, 24921, 24961, 24974, 24985, 24996, 25023, 25040, 25052, 25092, 25131, 25162, 25168, 25186, 25223, 25228, 25234, 25263, 25272, 25306, 25314, 25336, 25357, 25391, 25414, 25441, 25480, 25516, 25542, 25572, 25582, 25602, 25613, 25641, 25671, 25676, 25709, 25729, 25734, 25764, 25780, 25808, 25828, 25849, 25883, 25888, 25921, 25923, 25943, 25981, 25996, 26006, 26045, 26075, 26111, 26123, 26149, 26168, 26187, 26202, 26203, 26234, 26268, 26286, 26298, 26308, 26342, 26372, 26378, 26389, 26427, 26465, 26496, 26520, 26523, 26562, 26587, 26609, 26644, 26662, 26666, 26700, 26737, 26751, 26773, 26778, 26806, 26816, 26826, 26840, 26842, 26874, 26878, 26887, 26889, 26910, 26949, 26954, 26961, 26966, 26969, 26973, 26993, 27005, 27019, 27046, 27070, 27085, 27107, 27140, 27161, 27178, 27202, 27215, 27245, 27271, 27303, 27327, 27330, 27347, 27352, 27377, 27387, 27396, 27420, 27459, 27463, 27465, 27482, 27483, 27500, 27539, 27545, 27570, 27602, 27615, 27632, 27656, 27695, 27698, 27703, 27722, 27750, 27754, 27791, 27793, 27807, 27816, 27825, 27858, 27861, 27889, 27895, 27935, 27949, 27957, 27973, 27986, 27990, 28010, 28032, 28057, 28061, 28067, 28078, 28094, 28119, 28155, 28175, 28193, 28230, 28259, 28262, 28301, 28320, 28351, 28374, 28405, 28406, 28407, 28445, 28467, 28483, 28507, 28547, 28554, 28564, 28588, 28605, 28621, 28636, 28676, 28710, 28729, 28733, 28765, 28769, 28789, 28798, 28836, 28839, 28853, 28865, 28868, 28879, 28888, 28903, 28916, 28918, 28932, 28935, 28956, 28990, 29025};
        assert(L.size() == K);
        long long Al = 0, Bl = 1, Cl = 1, Dl = 344230415;
        std::vector<int> H = {936760, 444849, 902633, 513705, 683330, 247316, 759798, 668050, 767665, 424721, 372705, 309001, 789357, 208783, 514328, 594914, 99076, 871374, 899402, 778904, 979602, 442696, 46378, 869757, 360268, 519986, 350978, 679116, 354217, 834401, 705841, 143642, 396141, 65930, 160963, 601579, 433427, 673186, 204523, 777185, 829654, 889508, 475679, 777487, 85916, 865009, 925968, 414188, 633664, 141521, 268869, 553188, 901882, 668439, 572819, 30216, 33453, 379427, 937467, 497508, 214797, 503170, 651296, 645041, 292331, 81456, 742883, 595169, 795359, 561341, 235037, 296408, 913297, 610764, 765560, 945659, 279588, 229560, 76842, 806560, 469567, 462418, 404688, 525989, 690104, 182470, 854947, 735068, 382175, 928348, 624985, 522340, 343973, 664154, 826458, 500371, 982568, 790406, 951133, 328207, 691932, 704456, 960415, 582524, 362903, 44398, 541440, 45839, 725688, 155530, 374906, 650178, 890229, 27062, 748926, 268896, 802689, 741240, 450285, 282496, 791190, 513664, 128495, 528334, 365732, 645710, 746868, 876036, 653654, 708336, 595845, 870073, 627069, 466857, 746438, 855696, 987227, 818990, 337610, 835921, 555726, 385418, 667411, 550868, 509528, 811297, 620453, 442393, 635207, 91153, 262981, 994485, 565573, 168052, 112915, 263271, 23678, 17922, 85441, 271177, 24809, 290836, 970735, 942498, 387510, 573699, 389477, 318552, 185683, 299951, 294828, 669699, 59994, 799131, 502857, 24732, 723674, 471350, 172759, 850708, 515456, 663616, 150081, 832673, 660571, 667351, 923251, 269223, 599450, 805461, 699429, 758615, 506003, 486191, 211535, 90299, 679482, 294096, 306328, 156144, 209237, 12920, 747113, 625934, 778659, 90289, 983709, 258479, 961305, 428649, 20820, 529694, 516743, 65393, 238823, 683998, 251738, 582545, 874998, 292820, 386554, 607109, 44572, 387282, 383316, 668377, 876484, 383296, 450802, 559708, 562709, 311721, 271365, 848580, 195017, 72223, 38789, 148702, 298651, 233676, 546927, 453743, 171359, 791063, 258925, 469612, 727147, 11439, 731348, 944403, 334323, 240055, 498951, 455141, 266483, 626894, 862456, 298880, 166789, 991482, 330319, 743900, 964946, 615600, 209315, 80034, 975013, 440514, 188965, 2852, 894299, 355301, 957660, 639549, 738359, 506462, 474186, 918470, 694034, 648841, 644398, 563442, 938799, 419846, 498787, 321991, 140717, 108865, 298406, 18490, 652245, 481691, 978484, 214693, 21843, 772026, 603218, 262183, 392898, 248298, 728486, 569176, 307296, 428910, 451331, 739815, 290913, 1959, 96706, 629715, 528671, 560736, 799755, 302082, 341998, 66676, 275507, 659201, 266638, 15708, 553920, 424345, 879418, 824089, 749319, 212170, 141149, 720890, 451766, 219687, 696804, 617675, 223790, 6349, 710702, 197082, 147848, 918337, 938272, 63015, 613753, 940518, 882902, 81703, 385168, 656087, 440308, 274805, 205724, 404391, 929306, 617686, 330026, 311090, 337718, 590311, 458411, 819168, 251571, 472101, 341685, 295926, 80719, 930649, 468128, 805016, 983306, 465054, 693841, 66399, 257658, 716880, 858451, 835091, 718395, 457619, 44896, 201157, 850244, 388413, 9792, 847372, 909782, 295521, 214729, 274586, 849805, 79161, 603204, 870266, 743257, 374383, 287216, 887080, 776710, 909384, 823328, 91212, 245430, 936174, 65471, 648021, 66353, 362520, 158452, 412334, 674003, 986584, 400160, 875424, 985636, 981952, 268932, 31812, 116485, 333170, 257152, 910563, 677189, 13571, 973622, 57260, 148435, 658444, 981453, 3153, 781454, 543117, 60306, 754494, 955897, 917245, 931128, 331190, 812618, 793650, 680448, 453580, 978785, 625257, 81268, 610748, 221782, 9011, 639053, 401572, 66859, 745725, 390708, 88418, 599200, 746874, 35110, 620107, 722278, 349167, 946608, 212228, 828075, 636250, 767194, 436929, 893716, 282752, 537824, 146904, 745481, 503890, 130587, 799553, 685225, 998651, 267967, 767212, 888415, 345161, 404989, 597055, 837260, 40885, 832649, 689131, 190820, 844112, 898230, 168938, 763925, 550284, 448956, 193431, 286625, 621349, 387036, 732329, 249997, 210858, 543002, 819725, 834161, 146668, 552617, 343776, 931760, 522498, 159717, 916422, 218818, 564725, 502522, 979882, 830445, 204879, 816290, 320210, 106579, 852539, 511627, 91549, 837732, 32665, 894486, 91356, 211763, 927905, 823100, 697291, 153638, 760049, 180747, 789675, 786504, 982900, 63694, 547773, 41849, 798257, 437835, 460700, 160453, 209645, 946214, 242167, 298705, 850878, 914083, 141931, 79665, 996206, 278025, 157369, 152919, 678728, 472866, 413801, 671911, 779522, 91998, 317754, 241830, 635782, 46359, 889284, 882448, 97887, 786031, 794732, 750472, 153405, 239317, 84740, 43626, 128740, 790439, 293181, 527996, 526455, 562545, 670601, 796292, 798109, 671572, 576081, 425203, 361294, 184002, 829072, 454527, 383356, 544422, 993035, 115278, 830496, 378848, 515757, 520974, 671391, 970926, 912130, 587297, 617881, 638886, 526800, 307894, 309071, 45280, 779662, 32435, 732590, 178032, 78658, 616078, 371708, 532944, 899898, 413179, 580446, 309149, 55654, 954752, 613379, 231800, 655248, 1764, 551729, 478157, 203578, 902213, 435178, 547568, 49171, 419977, 333242, 962851, 764117, 988397, 39328, 896692, 236350, 507897, 519959, 605187, 118952, 684052, 58240, 496610, 282375, 903988, 920365, 584725, 487935, 407469, 118604, 742456, 389856, 689963, 343726, 38528, 594111, 37499, 700083, 766105, 76018, 350339, 947028, 323759, 321639, 612754, 238285, 561417, 993, 246930, 764069, 58127, 898705, 790554, 700699, 63148, 613581, 275616, 976751, 369742, 45103, 884492, 343370, 216394, 109837, 89831, 660682, 132957, 740240, 410930, 21486, 683726, 50419, 58131, 988891, 437807, 740250, 635882, 795145, 544258, 792268, 861827, 181197, 328887, 859407, 139108, 812675, 836435, 528159, 221061, 71511, 614061, 723402, 504351, 587056, 378643, 280043, 292189, 953594, 695561, 422465, 321711, 565135, 6641, 75307, 530366, 264642, 466822, 553858, 121850, 558599, 170370, 339603, 469006, 925058, 168480, 606391, 411253, 351146, 824124, 224337, 401958, 274522, 173078, 855204, 988971, 877748, 685813, 244238, 91344, 954034, 105960, 734629, 41526, 13259, 448039, 191085, 852679, 166654, 470041, 811507, 930947, 723325, 912367, 453896, 534393, 375225, 771693, 460701, 772050, 900486, 419337, 253944, 231368, 310764, 21356, 522385, 80116, 918025, 942165, 20555, 974212, 758950, 624413, 648402, 652683, 203732, 121813, 273357, 739122, 453122, 651531, 853632, 735564, 577759, 312556, 437570, 507144, 538982, 16259, 795221, 41727, 460427, 92831, 541607, 200493, 872640, 747283, 323684, 492029, 361060, 192407, 215990, 703293, 694153, 772364, 429146, 505073, 760480, 517661, 867232, 738435, 74499, 668353, 437119, 24920, 453087, 601885, 484562, 238269, 259388, 322117, 125811, 422464, 161579, 53795, 924019, 269147, 686859, 528432, 165555, 920076, 577079, 502240, 23778, 751680, 495183, 203995, 30547, 550125, 522338, 348453, 59769, 146047, 370677, 61406, 179906, 422250, 647987, 626597, 34126, 900190, 905968, 650584, 470347, 842265, 35867, 751927, 885679, 381910, 986496, 322535, 923344, 101923, 913656, 368466, 594531, 979088, 685102, 203051, 275215, 293571, 897742, 528015, 870765, 10793, 864395, 354567, 870751, 23559, 940109, 857130, 951050, 756590, 806198, 287136, 77233, 337613, 198160, 864513, 814703, 851808, 835733, 22811, 707729, 352967, 315546, 311187, 751885, 447345, 949528, 187042, 464995, 461687, 115992, 152001, 485455, 527237, 909051, 472736, 65832, 16115, 236835, 188367, 790489, 204274, 904898, 149632, 741945, 700385, 762685, 961251, 520520, 65919, 245308, 959729, 387016, 219707, 405648, 350277, 951093, 156776, 446978, 254948, 457123, 417164, 306228, 380253, 234484, 326487, 383670, 893580, 615922, 253105, 198312, 371192, 274767, 279788, 451847, 363804, 42102, 901913, 941718, 850307, 173517, 509430, 755113, 621836, 296458, 992901, 89041, 245709, 33071, 372984, 378079, 356756, 555619, 837512, 505687, 518473, 768623, 218020, 373107, 438319, 833233, 787911, 483408, 686345, 952896, 536162, 950009, 495001, 840446, 428473, 944463, 53060, 571987, 562570, 676689};
        assert(H.size() == K);
        long long Ah = 20246661, Bh = 36962576, Ch = 602210939, Dh = 110541213;
        for (int n = K; n < N; n++) {
            int l = ((Al * L[L.size() - 2] + Bl * L[L.size() - 1] + Cl) % Dl) + 1;
            L.push_back(l);
            int h = ((Ah * H[H.size() - 2] + Bh * H[H.size() - 1] + Ch) % Dh) + 1;
            H.push_back(h);
        }
        assert(L.size() == N);
        assert(H.size() == N);
        int answer = solve(L, H, W);
        assert(answer == 750990988);
    }

    int T; std::cin >> T;
    for (int t = 0; t < T; t++) {
        int N, K, W; std::cin >> N >> K >> W;
        std::vector<int> L;
        for (int k = 0; k < K; k++) {
            int i; std::cin >> i;
            L.push_back(i);
        }
        assert(L.size() == K);
        long long Al, Bl, Cl, Dl; std::cin >> Al >> Bl >> Cl >> Dl;
        std::vector<int> H;
        for (int k = 0; k < K; k++) {
            int i; std::cin >> i;
            H.push_back(i);
        }
        assert(H.size() == K);
        long long Ah, Bh, Ch, Dh; std::cin >> Ah >> Bh >> Ch >> Dh;

        // Compute L from Al, Bl, Cl, Dl. Compute H from Ah, Bh, Ch, Dh.
        for (int n = K; n < N; n++) {
            int l = ((Al * L[L.size() - 2] + Bl * L[L.size() - 1] + Cl) % Dl) + 1;
            L.push_back(l);
            int h = ((Ah * H[H.size() - 2] + Bh * H[H.size() - 1] + Ch) % Dh) + 1;
            H.push_back(h);
        }
        assert(L.size() == N);
        assert(H.size() == N);

        int answer = solve(L, H, W);
        std::cout << "Case #" << t + 1 << ": " << answer << std::endl;
    }
    return 0;
}
